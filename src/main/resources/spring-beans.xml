<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- 【C3P0q配置：http://happyqing.iteye.com/blog/2365459】 -->
	<!-- 【C3P0q配置：http://www.yeolar.com/note/2011/10/27/spring-c3p0/】 -->
	<!-- 【SPEL使用System property：https://stackoverflow.com/questions/3965446/how-to-read-system-environment-variable-in-spring-applicationcontext】 -->
	<bean id="c3p0DataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="org.sqlite.JDBC" />
		<property name="jdbcUrl"
			value="jdbc:sqlite:#{systemProperties['user.dir']}/mySqlLiteDB.db" />
		<!-- <property name="user" value="${jdbc.username}" /> -->
		<!-- <property name="password" value="${jdbc.password}" /> -->

		<!-- 连接池中保留的最大连接数 Default: 15 -->
		<property name="maxPoolSize" value="20" />
		<!-- 连接池中保留的最小连接数 -->
		<property name="minPoolSize" value="5" />
		<!-- 初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间 Default: 3 -->
		<property name="initialPoolSize" value="10" />
		<!-- 最大空闲时间，60秒内未使用则连接被丢弃，若为0则永不丢弃 Default: 0 -->
		<property name="maxIdleTime" value="600" />
		<!-- 定义在从数据库获取新连接失败后重复尝试的次数 Default: 30 -->
		<property name="acquireRetryAttempts" value="30" />
		<!-- 获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭 
			Default: false -->
		<property name="breakAfterAcquireFailure" value="true" />
		<!-- JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭 
			Default: 0 -->
		<property name="maxStatements" value="0" />
		<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数 Default: 3 -->
		<property name="acquireIncrement" value="3" />
		<!-- 每60秒检查所有连接池中的空闲连接 Default: 0 -->
		<property name="idleConnectionTestPeriod" value="60" />
		<!-- 因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable等方法来提升连接测试的性能 Default: false -->
		<property name="testConnectionOnCheckout" value="false" />

		<!--定义所有连接测试都执行的测试语句。在使用连接测试的情况下这个一显著提高测试速度。注意： 测试的表必须在初始数据源的时候就存在。Default: null -->
		<!-- <property name="preferredTestQuery" value="SELECT count(1) FROM z40180_deptTB"/> -->
	</bean>


	<bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean" scope="singleton">
		<property name="dataSource" ref="c3p0DataSource"/>
<!-- 		<property name="packagesToScan" value=""/> -->
		<property name="hibernateProperties">
			<props>  
	            <prop key="hibernate.dialect">org.hibernate.dialect.SQLiteDialect</prop>  
	            <prop key="hibernate.show_sql">true</prop>  
	            <prop key="hibernate.format_sql">true</prop>  
	            <prop key="hibernate.use_sql_comments">true</prop>  
	            <prop key="hibernate.cache.use_second_level_cache">false</prop>
	        </props>  
		</property>
	</bean>
		
		
	<bean id="txManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager" scope="singleton" 
		p:sessionFactory-ref="sessionFactory" 
	/> 
		
	
	<tx:annotation-driven/>
	
	
	<!-- 自動重置db -->
	<jdbc:initialize-database data-source="c3p0DataSource">
		<jdbc:script location="classpath:db_initial_script/db-schema.sql" />
		<jdbc:script location="classpath:db_initial_script/db-test-data.sql" />
	</jdbc:initialize-database>

</beans>


